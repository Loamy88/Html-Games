<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Wordle Game</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #121212;
            color: white;
            margin: 0;
            flex-direction: column;
        }
        #game {
            display: grid;
            grid-template-columns: repeat(5, 50px);
            gap: 8px;
        }
        .tile {
            width: 50px;
            height: 50px;
            border: 2px solid #444;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 20px;
            font-weight: bold;
            text-transform: uppercase;
        }
        .correct {
            background-color: #6aaa64;
            border-color: #6aaa64;
        }
        .present {
            background-color: #c9b458;
            border-color: #c9b458;
        }
        .absent {
            background-color: #2f2f2f; /* Darker gray */
            border-color: #2f2f2f; /* Darker gray */
        }
        .unset {
            background-color: #444;
            border-color: #444;
        }
        #message {
            margin-top: 20px;
            font-size: 18px;
        }
        #keyboard {
            margin-top: 20px;
            display: grid;
            grid-template-columns: repeat(10, 35px);
            gap: 5px;
        }
        .key {
            padding: 10px;
            background-color: #444;
            color: white;
            text-align: center;
            cursor: pointer;
            border-radius: 4px;
            user-select: none;
        }
        .key.wide {
            grid-column: span 2;
        }
        #restart {
            margin-top: 20px;
            padding: 10px 20px;
            background-color: #444;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }
        #restart:hover {
            background-color: #666;
        }
    </style>
</head>
<body>

    <div id="game"></div>
    <div id="message"></div>
    <div id="keyboard"></div>
    <button id="restart" style="display: none;">Restart</button>

    <script>
        let validWords = [];
        let possibleAnswers = [];
        let targetWord = '';
        let currentRow = 0;
        let currentGuess = '';

        const gameContainer = document.getElementById('game');
        const messageContainer = document.getElementById('message');
        const keyboardContainer = document.getElementById('keyboard');
        const restartButton = document.getElementById('restart');

        // Fetch the list of valid words and possible answers
        Promise.all([
            fetch('https://gist.githubusercontent.com/dracos/dd0668f281e685bad51479e5acaadb93/raw/6bfa15d263d6d5b63840a8e5b64e04b382fdb079/valid-wordle-words.txt').then(response => response.text()),
            fetch('https://gist.githubusercontent.com/cfreshman/a03ef2cba789d8cf00c08f767e0fad7b/raw/45c977427419a1e0edee8fd395af1e0a4966273b/wordle-answers-alphabetical.txt').then(response => response.text())
        ])
        .then(([validWordsText, possibleAnswersText]) => {
            validWords = validWordsText.split('\n').map(word => word.trim());
            possibleAnswers = possibleAnswersText.split('\n').map(word => word.trim());

            // Select a random target word from possible answers
            targetWord = possibleAnswers[Math.floor(Math.random() * possibleAnswers.length)];
        })
        .catch(error => {
            setMessage('Failed to load word lists. Please try again later.');
        });

        // Create the game grid
        for (let i = 0; i < 6; i++) {
            for (let j = 0; j < 5; j++) {
                const tile = document.createElement('div');
                tile.className = 'tile';
                tile.setAttribute('data-row', i);
                tile.setAttribute('data-col', j);
                gameContainer.appendChild(tile);
            }
        }

        // Create the keyboard
        const keys = 'qwertyuiopasdfghjklzxcvbnm'.split('').concat(['Enter', 'Backspace']);
        keys.forEach(key => {
            const keyElement = document.createElement('div');
            keyElement.className = 'key unset'; // Initialize with unset class
            keyElement.textContent = key === 'Backspace' ? 'âŒ«' : key;
            keyElement.setAttribute('data-key', key.toLowerCase());
            if (key === 'Enter' || key === 'Backspace') {
                keyElement.classList.add('wide');
            }
            keyElement.addEventListener('click', () => handleKey(key));
            keyboardContainer.appendChild(keyElement);
        });

        // Listen for physical keyboard inputs
        document.addEventListener('keydown', (event) => {
            const key = event.key.toLowerCase();
            if (keys.includes(key) || key === 'enter' || key === 'backspace') {
                handleKey(key === 'enter' ? 'Enter' : key === 'backspace' ? 'Backspace' : key);
            }
        });

        // Restart button functionality
        restartButton.addEventListener('click', async () => {
            try {
                const response = await fetch('https://raw.githubusercontent.com/Loamy88/Html-Games/main/wordle');
                const newContent = await response.text();
                document.open();
                document.write(newContent);
                document.close();
            } catch (error) {
                setMessage('Failed to load new content. Please try again later.');
            }
        });

        function handleKey(key) {
            if (key === 'Enter') {
                if (currentGuess.length === 5) {
                    if (validWords.includes(currentGuess.toLowerCase())) {
                        checkGuess();
                    } else {
                        setMessage('Invalid word. Please try again.');
                    }
                }
            } else if (key === 'Backspace') {
                currentGuess = currentGuess.slice(0, -1);
                updateGrid();
            } else if (currentGuess.length < 5 && /^[a-z]$/.test(key)) {
                currentGuess += key;
                updateGrid();
            }
        }

        function updateGrid() {
            for (let i = 0; i < 5; i++) {
                setTimeout(() => {
                    const tile = gameContainer.querySelector(`[data-row="${currentRow}"][data-col="${i}"]`);
                    tile.textContent = currentGuess[i] || '';
                }, i * 150);
            }
        }

        function checkGuess() {
            let guess = currentGuess.toLowerCase();
            let remainingTargetLetters = targetWord.split('');
            let remainingGuessLetters = guess.split('');
            const colors = [];

            // First pass: Mark correct letters (green)
            for (let i = 0; i < 5; i++) {
                if (guess[i] === targetWord[i]) {
                    colors[i] = 'correct';
                    remainingTargetLetters[i] = null;
                    remainingGuessLetters[i] = null;
                }
            }

            // Second pass: Mark present letters (yellow) and absent letters (gray)
            for (let i = 0; i < 5; i++) {
                if (remainingGuessLetters[i] !== null) {
                    const index = remainingTargetLetters.indexOf(remainingGuessLetters[i]);
                    if (index !== -1) {
                        colors[i] = 'present';
                        remainingTargetLetters[index] = null;
                    } else {
                        colors[i] = 'absent';
                    }
                }
            }

            // Reveal the colors with delay
            colors.forEach((color, i) => {
                setTimeout(() => {
                    const tile = gameContainer.querySelector(`[data-row="${currentRow}"][data-col="${i}"]`);
                    tile.classList.add(color);

                    // Update the keyboard key color
                    updateKeyboardKeyColor(guess[i], color);
                }, i * 400);
            });

            setTimeout(() => {
                if (guess === targetWord) {
                    setMessage('You guessed it!');
                    endGame();
                } else if (currentRow === 5) {
                    setMessage(`Game over! The word was "${targetWord}".`);
                    endGame();
                } else {
                    currentRow++;
                    currentGuess = '';
                }
            }, 5 * 400);
        }

        function updateKeyboardKeyColor(letter, color) {
            const keyElement = keyboardContainer.querySelector(`.key[data-key="${letter}"]`);
            if (keyElement) {
                console.log(`Updating color for key "${letter}" to "${color}"`); // Debugging line

                const currentColor = keyElement.classList.contains('correct') ? 'correct' :
                                     keyElement.classList.contains('present') ? 'present' :
                                     keyElement.classList.contains('absent') ? 'absent' : 'unset';

                // Only update the key color if the new color is "more positive"
                if (color === 'correct' && currentColor !== 'correct') {
                    keyElement.style.backgroundColor = '#6aaa64';
                    keyElement.style.borderColor = '#6aaa64';
                    keyElement.classList.remove('unset');
                    keyElement.classList.add('correct');
                } else if (color === 'present' && currentColor === 'unset') {
                    keyElement.style.backgroundColor = '#c9b458';
                    keyElement.style.borderColor = '#c9b458';
                    keyElement.classList.remove('unset');
                    keyElement.classList.add('present');
                } else if (color === 'absent' && currentColor === 'unset') {
                    keyElement.style.backgroundColor = '#2f2f2f'; // Darker gray
                    keyElement.style.borderColor = '#2f2f2f'; // Darker gray
                    keyElement.classList.remove('unset');
                    keyElement.classList.add('absent');
                }
            }
        }

        function setMessage(message) {
            messageContainer.textContent = message;
            setTimeout(() => {
                messageContainer.textContent = '';
            }, 3000);
        }

        function endGame() {
            keyboardContainer.style.display = 'none';
            restartButton.style.display = 'block';
        }
    </script>

</body>
</html>
