<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pong Game</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background-color: black;
        }
        canvas {
            background-color: #000;
        }
        .score {
            position: absolute;
            color: white;
            font-size: 24px;
            font-family: Arial, sans-serif;
        }
        .score.player1 {
            top: 20px;
            left: 50px;
        }
        .score.player2 {
            top: 20px;
            right: 50px;
        }
    </style>
</head>
<body>
    <canvas id="pongCanvas" width="1100" height="520"></canvas>
    <div class="score player1" id="scorePlayer1">0</div>
    <div class="score player2" id="scorePlayer2">0</div>
    <audio id="hitSound" src="https://raw.githubusercontent.com/Loamy88/Html-Games/main/retro.mp3"></audio>
    <audio id="deathSound" src="https://raw.githubusercontent.com/Loamy88/Html-Games/main/rdeath.mp3"></audio>
    <script>
        const canvas = document.getElementById('pongCanvas');
        const context = canvas.getContext('2d');

        const hitSound = document.getElementById('hitSound');
        const deathSound = document.getElementById('deathSound');

        const paddleWidth = 10, paddleHeight = 100;
        const ballRadius = 10;
        const player1 = { x: 0, y: canvas.height / 2 - paddleHeight / 2, width: paddleWidth, height: paddleHeight, score: 0 };
        const player2 = { x: canvas.width - paddleWidth, y: canvas.height / 2 - paddleHeight / 2, width: paddleWidth, height: paddleHeight, score: 0 };
        const ball = { x: canvas.width / 2, y: canvas.height / 2, radius: ballRadius, speed: 5, velocityX: 5, velocityY: 5, hitCount: 0, color: 'white' };

        const keys = { w: false, s: false, o: false, l: false };

        function drawRect(x, y, width, height, color) {
            context.fillStyle = color;
            context.fillRect(x, y, width, height);
        }

        function drawCircle(x, y, radius, color) {
            context.fillStyle = color;
            context.beginPath();
            context.arc(x, y, radius, 0, Math.PI * 2, false);
            context.closePath();
            context.fill();
        }

        function drawNet() {
            for (let i = 0; i <= canvas.height; i += 15) {
                drawRect(canvas.width / 2 - 1, i, 2, 10, 'white');
            }
        }

        function drawScore() {
            document.getElementById('scorePlayer1').textContent = player1.score;
            document.getElementById('scorePlayer2').textContent = player2.score;
        }

        function collision(paddle, ball) {
            return paddle.x < ball.x + ball.radius &&
                   paddle.x + paddle.width > ball.x - ball.radius &&
                   paddle.y < ball.y + ball.radius &&
                   paddle.y + paddle.height > ball.y - ball.radius;
        }

        function resetBall() {
            ball.x = canvas.width / 2;
            ball.y = canvas.height / 2;
            ball.speed = 5;
            ball.velocityX = 5 * (Math.random() > 0.5 ? 1 : -1);
            ball.velocityY = 5 * (Math.random() > 0.5 ? 1 : -1);
            ball.hitCount = 0;
            ball.color = 'white';
        }

        function update() {
            if (keys.w && player1.y > 0) player1.y -= 7;
            if (keys.s && player1.y < canvas.height - player1.height) player1.y += 7;
            if (keys.o && player2.y > 0) player2.y -= 7;
            if (keys.l && player2.y < canvas.height - player2.height) player2.y += 7;

            ball.x += ball.velocityX;
            ball.y += ball.velocityY;

            if (ball.y + ball.radius > canvas.height || ball.y - ball.radius < 0) {
                ball.velocityY = -ball.velocityY;
            }

            let player = (ball.x < canvas.width / 2) ? player1 : player2;

            if (collision(player, ball)) {
                hitSound.play();
                let collidePoint = (ball.y - (player.y + player.height / 2));
                collidePoint = collidePoint / (player.height / 2);
                let angleRad = (Math.PI / 4) * collidePoint;
                let direction = (ball.x < canvas.width / 2) ? 1 : -1;
                ball.velocityX = direction * ball.speed * Math.cos(angleRad);
                ball.velocityY = ball.speed * Math.sin(angleRad);

                ball.hitCount++;
                ball.speed += 0.3 + Math.random() * 0.2;

                // Change ball color based on hit count
                if (ball.hitCount === 1) {
                    ball.color = 'yellow';
                } else {
                    let red = Math.min((ball.hitCount - 1) * 25.5, 255);
                    let green = Math.max(255 - (ball.hitCount - 1) * 25.5, 0);
                    ball.color = `rgb(${red}, ${green}, 0)`;
                }
            }

            if (ball.x - ball.radius < 0) {
                player2.score++;
                deathSound.play();
                resetBall();
            } else if (ball.x + ball.radius > canvas.width) {
                player1.score++;
                deathSound.play();
                resetBall();
            }

            drawScore();

            if (player1.score === 10 || player2.score === 10) {
                alert((player1.score === 10 ? "Player 1" : "Player 2") + " wins!");
                player1.score = 0;
                player2.score = 0;
                resetBall();
            }
        }

        function render() {
            drawRect(0, 0, canvas.width, canvas.height, 'black');
            drawNet();
            drawRect(player1.x, player1.y, player1.width, player1.height, 'white');
            drawRect(player2.x, player2.y, player2.width, player2.height, 'white');
            drawCircle(ball.x, ball.y, ball.radius, ball.color);
        }

        function gameLoop() {
            update();
            render();
        }

        setInterval(gameLoop, 1000 / 60);

        document.addEventListener('keydown', event => {
            switch (event.key) {
                case 'w': keys.w = true; break;
                case 's': keys.s = true; break;
                case 'o': keys.o = true; break;
                case 'l': keys.l = true; break;
            }
        });

        document.addEventListener('keyup', event => {
            switch (event.key) {
                case 'w': keys.w = false; break;
                case 's': keys.s = false; break;
                case 'o': keys.o = false; break;
                case 'l': keys.l = false; break;
            }
        });
    </script>
</body>
</html>
