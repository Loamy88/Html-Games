<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tetris</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background: #000;
            color: #fff;
            font-family: Arial, sans-serif;
        }
        canvas {
            border: 1px solid #fff;
        }
        .score {
            position: absolute;
            top: 20px;
            left: 100px;
        }
        .preview {
            position: absolute;
            top: 20px;
            right: 20px;
        }
        .game-over {
            display: none;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
        }
        .game-over button {
            margin-top: 20px;
            padding: 10px 20px;
            font-size: 16px;
        }
        .settings {
            position: absolute;
            top: 20px;
            left: 20px;
        }
        .settings-menu {
            display: none;
            position: absolute;
            top: 50px;
            left: 20px;
            background: #333;
            padding: 10px;
            border-radius: 5px;
        }
        .settings-menu input {
            margin: 5px 0;
        }
    </style>
</head>
<body>
    <div class="score">Score: <span id="score">0</span></div>
    <canvas id="tetris" width="240" height="400"></canvas>
    <canvas id="next" width="100" height="100" class="preview"></canvas>
    <div class="game-over" id="game-over">
        <h1>Game Over</h1>
        <p>Your score: <span id="final-score">0</span></p>
        <button onclick="restartGame()">Restart</button>
    </div>
    <div class="settings">
        <button onclick="toggleSettingsMenu()">Settings</button>
    </div>
    <div class="settings-menu" id="settings-menu">
        <h3>Settings</h3>
        <div id="keyBindings">
            <div>
                <label>Move Left: <input type="text" id="leftKey" readonly></label>
            </div>
            <div>
                <label>Move Right: <input type="text" id="rightKey" readonly></label>
            </div>
            <div>
                <label>Move Down: <input type="text" id="downKey" readonly></label>
            </div>
            <div>
                <label>Hard Drop: <input type="text" id="hardDropKey" readonly></label>
            </div>
            <div>
                <label>Rotate Left: <input type="text" id="rotateLeftKey" readonly></label>
            </div>
            <div>
                <label>Rotate Right: <input type="text" id="rotateRightKey" readonly></label>
            </div>
            <div>
                <label>Restart: <input type="text" id="restartKey" readonly></label>
            </div>
        </div>
        <button onclick="saveSettings()">Save</button>
    </div>
    <audio id="groundSound" src="https://raw.githubusercontent.com/Loamy88/Html-Games/main/rground.mp3"></audio>
    <audio id="clearSound" src="https://raw.githubusercontent.com/Loamy88/Html-Games/main/rclear.mp3"></audio>
    <script>
        const canvas = document.getElementById('tetris');
        const context = canvas.getContext('2d');
        context.scale(20, 20);

        const nextCanvas = document.getElementById('next');
        const nextContext = nextCanvas.getContext('2d');
        nextContext.scale(20, 20);

        const arena = createMatrix(12, 20);
        const player = {
            pos: {x: 5, y: 5},
            matrix: null,
            score: 0
        };

        let nextPiece = createPiece(randomPiece());

        const colors = [
            null,
            '#FF0D72',
            '#0DC2FF',
            '#0DFF72',
            '#F538FF',
            '#FF8E0D',
            '#FFE138',
            '#3877FF'
        ];

        const groundSound = document.getElementById('groundSound');
        const clearSound = document.getElementById('clearSound');

        let keyBindings = {
            left: undefined,
            right: undefined,
            down: undefined,
            hardDrop: undefined,
            rotateLeft: undefined,
            rotateRight: undefined,
            restart: undefined
        };

        function createMatrix(w, h) {
            const matrix = [];
            while (h--) {
                matrix.push(new Array(w).fill(0));
            }
            return matrix;
        }

        function createPiece(type) {
            switch (type) {
                case 'T':
                    return [
                        [0, 0, 0],
                        [1, 1, 1],
                        [0, 1, 0],
                    ];
                case 'O':
                    return [
                        [2, 2],
                        [2, 2],
                    ];
                case 'L':
                    return [
                        [0, 3, 0],
                        [0, 3, 0],
                        [0, 3, 3],
                    ];
                case 'J':
                    return [
                        [0, 4, 0],
                        [0, 4, 0],
                        [4, 4, 0],
                    ];
                case 'I':
                    return [
                        [0, 5, 0, 0],
                        [0, 5, 0, 0],
                        [0, 5, 0, 0],
                        [0, 5, 0, 0],
                    ];
                case 'S':
                    return [
                        [0, 6, 6],
                        [6, 6, 0],
                        [0, 0, 0],
                    ];
                case 'Z':
                    return [
                        [7, 7, 0],
                        [0, 7, 7],
                        [0, 0, 0],
                    ];
            }
        }

        function randomPiece() {
            const pieces = 'TJLOSZI';
            return pieces[pieces.length * Math.random() | 0];
        }

        function drawMatrix(matrix, offset, ctx) {
            matrix.forEach((row, y) => {
                row.forEach((value, x) => {
                    if (value !== 0) {
                        ctx.fillStyle = colors[value];
                        ctx.fillRect(x + offset.x, y + offset.y, 1, 1);
                    }
                });
            });
        }

        function draw() {
            context.fillStyle = '#000';
            context.fillRect(0, 0, canvas.width, canvas.height);

            drawMatrix(arena, {x: 0, y: 0}, context);
            drawMatrix(player.matrix, player.pos, context);
        }

        function drawNext() {
            nextContext.fillStyle = '#000';
            nextContext.fillRect(0, 0, nextCanvas.width, nextCanvas.height);

            drawMatrix(nextPiece, {x: 1, y: 1}, nextContext);
        }

        function merge(arena, player) {
            player.matrix.forEach((row, y) => {
                row.forEach((value, x) => {
                    if (value !== 0) {
                        arena[y + player.pos.y][x + player.pos.x] = value;
                    }
                });
            });
        }

        function collide(arena, player) {
            const [m, o] = [player.matrix, player.pos];
            for (let y = 0; y < m.length; ++y) {
                for (let x = 0; x < m[y].length; ++x) {
                    if (m[y][x] !== 0 &&
                       (arena[y + o.y] &&
                        arena[y + o.y][x + o.x]) !== 0) {
                        return true;
                    }
                }
            }
            return false;
        }

        function playerDrop() {
            player.pos.y++;
            if (collide(arena, player)) {
                player.pos.y--;
                merge(arena, player);
                groundSound.play();  // Play ground sound
                playerReset();
                arenaSweep();
                updateScore();
            }
            dropCounter = 0;
        }

        function playerHardDrop() {
            while (!collide(arena, player)) {
                player.pos.y++;
            }
            player.pos.y--;
            merge(arena, player);
            groundSound.play();  // Play ground sound
            playerReset();
            arenaSweep();
            updateScore();
        }

        function playerMove(dir) {
            player.pos.x += dir;
            if (collide(arena, player)) {
                player.pos.x -= dir;
            }
        }

        function playerReset() {
            player.matrix = nextPiece;
            player.pos.y = 0;
            player.pos.x = (arena[0].length / 2 | 0) -
                           (player.matrix[0].length / 2 | 0);
            if (collide(arena, player)) {
                gameOver();
            }
            nextPiece = createPiece(randomPiece());
            drawNext();
        }

        function gameOver() {
            document.getElementById('final-score').innerText = player.score;
            document.getElementById('game-over').style.display = 'block';
            cancelAnimationFrame(animationId);
        }

        function restartGame() {
            arena.forEach(row => row.fill(0));
            player.score = 0;
            updateScore();
            dropInterval = 1500; // Reset drop interval
            document.getElementById('game-over').style.display = 'none';
            playerReset();
            update();
        }

        function rotate(matrix, dir) {
            for (let y = 0; y < matrix.length; ++y) {
                for (let x = 0; x < y; ++x) {
                    [
                        matrix[x][y],
                        matrix[y][x],
                    ] = [
                        matrix[y][x],
                        matrix[x][y],
                    ];
                }
            }

            if (dir > 0) {
                matrix.forEach(row => row.reverse());
            } else {
                matrix.reverse();
            }
        }

        function playerRotate(dir) {
            const pos = player.pos.x;
            let offset = 1;
            rotate(player.matrix, dir);
            while (collide(arena, player)) {
                player.pos.x += offset;
                offset = -(offset + (offset > 0 ? 1 : -1));
                if (offset > player.matrix[0].length) {
                    rotate(player.matrix, -dir);
                    player.pos.x = pos;
                    return;
                }
            }
        }

        let dropCounter = 0;
        let dropInterval = 1500; // Slower drop interval initially

        let lastTime = 0;
        let animationId;
        function update(time = 0) {
            const deltaTime = time - lastTime;

            dropCounter += deltaTime;
            if (dropCounter > dropInterval) {
                playerDrop();
            }

            lastTime = time;

            draw();
            animationId = requestAnimationFrame(update);
        }

        function arenaSweep() {
            let rowCount = 0;
            outer: for (let y = arena.length - 1; y > 0; --y) {
                for (let x = 0; x < arena[y].length; ++x) {
                    if (arena[y][x] === 0) {
                        continue outer;
                    }
                }

                const row = arena.splice(y, 1)[0].fill(0);
                arena.unshift(row);
                ++y;

                player.score += 10;
                rowCount++;
            }

            if (rowCount > 0) {
                clearSound.play();  // Play clear sound
                dropInterval = Math.max(dropInterval - 10 * rowCount, 100);
            }
        }

        function updateScore() {
            document.getElementById('score').innerText = player.score;
        }

        function toggleSettingsMenu() {
            const menu = document.getElementById('settings-menu');
            menu.style.display = menu.style.display === 'block' ? 'none' : 'block';
            if (menu.style.display === 'block') {
                setupKeyBindingInputs();
            }
        }

        function setupKeyBindingInputs() {
            const inputs = document.querySelectorAll('#keyBindings input');
            inputs.forEach(input => {
                input.value = keyBindings[input.id.replace('Key', '')] !== undefined ? 
                              String.fromCharCode(keyBindings[input.id.replace('Key', '')]) : 
                              'Press Key';
                input.addEventListener('keydown', (event) => {
                    event.preventDefault();
                    input.value = event.key.toUpperCase();
                    keyBindings[input.id.replace('Key', '')] = event.keyCode;
                }, { once: true });
            });
        }

        function saveSettings() {
            toggleSettingsMenu();
        }

        document.addEventListener('keydown', event => {
            if (keyBindings.left === event.keyCode) {
                playerMove(-1); // Left key
            } else if (keyBindings.right === event.keyCode) {
                playerMove(1); // Right key
            } else if (keyBindings.down === event.keyCode) {
                playerDrop(); // Down key
            } else if (keyBindings.hardDrop === event.keyCode) {
                playerHardDrop(); // Hard Drop key
            } else if (keyBindings.rotateLeft === event.keyCode) {
                playerRotate(-1); // Rotate Left key
            } else if (keyBindings.rotateRight === event.keyCode) {
                playerRotate(1); // Rotate Right key
            } else if (keyBindings.restart === event.keyCode) {
                restartGame(); // Restart key
            }
        });

        playerReset();
        updateScore();
        update();
    </script>
</body>
</html>
